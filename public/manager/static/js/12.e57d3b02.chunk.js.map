{"version":3,"sources":["routes/TagsListContainer/logic/deleteOneItem.js","routes/TagsListContainer/logic/deleteForeverOneItem.js","routes/TagsListContainer/logic/editItem.js","routes/TagsListContainer/logic/restoreItem.js","routes/TagsListContainer/logic/sortUsers.js","routes/TagsListContainer/logic/submitForm.js","routes/TagsListContainer/logic/fetchData.js","routes/TagsListContainer/logic/switchPage.js","routes/TagsListContainer/logic/addItem.js","routes/TagsListContainer/TagsListTable.jsx","routes/TagsListContainer/TagsEditForm.jsx","routes/TagsListContainer/TagsListContainer.jsx","routes/TagsListContainer/logic/fetchPersons.js","routes/TagsListContainer/index.js"],"names":["deleteOneItem","self","id","arguments","length","undefined","_self$props","props","tagsListPageLoading","tagsListPageErrorMessage","httpfetch","then","setState","prepareDeleteRowID","catch","err","message","setTimeout","deleteForeverOneItem","prepareDeleteForeverRowID","editItem","form","formData","FormData","document","getElementById","data","userListPageLoading","userListPageErrorMessage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","next","done","pair","value","return","currentEditRowIndex","restoreItem","_ref","total","sortUsers","newSortColumn","_self$state","state","direction","sort","click","submitForm","e","preventDefault","dataForFetch","page","limit","sort_direction","sort_column","i","target","elements","Object","objectSpread","defineProperty","name","setObjectToQueryString","query","tagsListPageSelectedRowsIDsArray","_ref$total","fetchData","switchPage","flag","addItem","catchedErrorMessage","displayAlert","console","log","object","forEach","key","addNewItemFlag","TagsListTable","defineQueryProps","currentEditRowCreatedAt","componentDidMount","render","classes","_this","_this$state","_this$state$data","_this$state$sort","_this$state$direction","_this$state$page","_this$state$limit","_this$state$total","_this$state$prepareDe","_this$state$prepareDe2","persons","map","react_default","a","createElement","Panel","className","root","Table","TableHeader","columns","Fragment","Typography","variant","text","Button","onClick","assertThisInitialized","row","TableRow","person","deleted_at","pagePaginationButtons","Pagination","concat","pagePaginationInfo","onSubmit","type","style","display","Dialog","title","onClose","control","Select","defaultValue","person_id","options","Input","React","PureComponent","connect","selectedRowsIdsArray","selectedRowsIdsArraySelector","dispatch","bindActionCreators","withStyles","margin","gridArea","& table","marginBottom","position","bottom","left","right","TagsEditForm","this","Typography_Typography","Select_Select","Input_Input","TagsListContainer","displayCopySeveralRows","displayDeleteSeveralRows","currentAddRowCreatedAt","moment","_this$props","dataLoadingFlag","createdAtFilterValue","userListPageCreatedAt","PageLoadingProcess","Header","color","TagsListContainer_TagsListTable","TagsListContainer_TagsEditForm","Alert","fetchPersons","Global","Palette","@global","#root","gridTemplateAreas","gridTemplateRows","gridTemplateColumns","lineHeight","& button, & a","& .fa"],"mappings":"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","file":"static/js/12.e57d3b02.chunk.js","sourcesContent":["import httpfetch from 'httpfetch.js';\n\nexport default (self, id = 0) => {\n\tconst { tagsListPageLoading, tagsListPageErrorMessage } = self.props;\n\n\ttagsListPageLoading(true);\n\treturn httpfetch('/tags/'+ id, 'DELETE')\n\t\t.then(() => {\n\t\t\ttagsListPageLoading(false);\n\t\t\tself.setState({\n                prepareDeleteRowID: 0,\n\t\t\t});\n\t\t})\n\t\t.catch((err) => {\n\t\t\ttagsListPageLoading(false);\n\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\t\n\t\t\tself.setState({\n\t\t\t\tprepareDeleteRowID: 0\n\t\t\t});\n\t\t\tsetTimeout(() => {\n\t\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\t}, 2600);\n\t\t});\n}","import httpfetch from 'httpfetch.js';\n\nexport default (self, id = 0) => {\n\tconst { tagsListPageLoading, tagsListPageErrorMessage } = self.props;\n\n\ttagsListPageLoading(true);\n\treturn httpfetch('/tags/trash/'+ id, 'DELETE')\n\t\t.then(() => {\n\t\t\ttagsListPageLoading(false);\n\t\t\tself.setState({\n                prepareDeleteForeverRowID: 0,\n\t\t\t});\n\t\t})\n\t\t.catch((err) => {\n\t\t\ttagsListPageLoading(false);\n\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\t\n\t\t\tself.setState({\n\t\t\t\tprepareDeleteForeverRowID: 0\n\t\t\t});\n\t\t\tsetTimeout(() => {\n\t\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\t}, 2600);\n\t\t});\n}","import httpfetch from 'httpfetch.js';\n\nexport default (self, form, id) => {\n    const formData = new FormData(document.getElementById(form));\n    const data = {};\n    // console.log(formData.serialize());\n\n    const { userListPageLoading, userListPageErrorMessage } = self.props;\n\n    for (let pair of formData.entries()) {\n        data[pair[0]] = pair[1];\n    }\n\n    return httpfetch('/tags/' + id, 'PUT', data)\n        .then(() => {\n            self.setState({\n                currentEditRowIndex: -1\n            });\n        })\n        .catch((err) => {\n            userListPageLoading(false);\n            userListPageErrorMessage(err.message);\n\n            self.setState({\n                currentEditRowIndex: -1\n            });\n            setTimeout(() => {\n                userListPageErrorMessage(err.message);\n            }, 2600);\n        });\n}","import httpfetch from 'httpfetch.js';\n\nexport default (self, id ) => {\n     return httpfetch('/tags/restore/' + id, 'PUT')\n            .then(({ data, total = 0 }) => {\n            })\n            .catch((err) => {\n            });\n}","\n/**\n * Sort data by column\n * Сортировка данных по определенной колонке\n * @param {String} newSortColumn - Название колонки\n * @param {String} newSortColumn - Column name\n * @return {Function}\n */\nexport default (self) => (newSortColumn = '') => () => {\n\tconst { direction, sort } = self.state;\n\n\tself.setState({\n\t\tsort: newSortColumn,\n\t\tdirection: sort !== newSortColumn ? 'asc' : \n\t\t\tdirection === 'desc' ?\n\t\t\t\t'asc' :\n\t\t\t\t'desc'\n\t}, () => {\n\t\tdocument.getElementById('tags-data-fetch-submit').click();\n\t});\n}","import {setObjectToQueryString} from 'url.js';\nimport fetchData from './fetchData.js';\n\nexport default (self) => (e) => {\n\te.preventDefault();\n\t\n\tlet dataForFetch = {\n\t\tpage: 1,\n\t\tlimit: 20,\n\t\tsort_direction: 'desc',\n\t\tsort_column: 'created_at'\n\t};\n\n\tfor (let i in e.target.elements) {\n\t\te.target.elements[i].value && (dataForFetch = { \n\t\t\t...dataForFetch, \n\t\t\t[e.target.elements[i].name]: e.target.elements[i].value \n\t\t});\n\t}\n\n\t// save props in url string\n\t// сохранить параметры в строке url запроса\n\tsetObjectToQueryString('Tags', 'tags', dataForFetch);\n\n\t// send request to server\n\t// отправить запрос на сервер\n\tfetchData(dataForFetch, '', self);\n}","import httpfetch from 'httpfetch.js';\n\nexport default (dataForFetch = {}, query = '', self = {}) => {\n\tconst { tagsListPageLoading, tagsListPageSelectedRowsIDsArray } = self.props;\n\t\n\ttagsListPageSelectedRowsIDsArray([]);\n\ttagsListPageLoading(true);\n\thttpfetch('/tags', 'GET', dataForFetch, query)\n\t\t.then(({ data, total = 0 }) => {\n\t\t\ttagsListPageLoading(false);\n\t\t\tself.setState({\n\t\t\t\ttotal,\n\t\t\t\tdata\n\t\t\t})\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconst { tagsListPageErrorMessage } = self.props;\n\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\tsetTimeout(() => {\n\t\t\t\ttagsListPageErrorMessage('');\n\t\t\t}, 2600);\n\n\t\t\ttagsListPageLoading(false);\n\t\t});\n}","/**\n * Switch current table page for paggination\n * @param {Number} page\n * @param {Boolean} flag\n * @return {Function}\n */\nexport default (self) => (page = 1, flag = true) => (e) => {\n\tif (flag) {\n\t\tself.setState({ page: page < 1 ? 1 : page }, () => {\n\t\t\tdocument.getElementById('tags-data-fetch-submit').click();\n\t\t});\n\t}\n}","import httpfetch from 'httpfetch.js';\n\nexport default (self, form) => {\n    const formData = new FormData(document.getElementById(form));\n\n    const { tagsListPageLoading, tagsListPageErrorMessage, catchedErrorMessage } = self.props;\n    const { displayAlert } = self.state;\n\n    console.log(666,formData);\n\n    const object = {};\n    formData.forEach(function(value, key){\n        object[key] = value;\n    });\n\n\n    return httpfetch('/tags', 'POST', object)\n        .then(() => {\n            self.setState({\n                addNewItemFlag: false\n            });\n        })\n        .catch((err) => {\n            self.setState({\n                displayAlert: err.message,\n            });\n            setTimeout(() => {\n                self.setState({\n                    displayAlert: '',\n                });\n            }, 2600);\n        });\n}","import React from 'react';\nimport withStyles from 'react-jss';\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    tagsListPageErrorMessage,\n    tagsListPageLoading,\n    tagsListPageSelectedRowsIDsArray\n} from 'actions/tagsListPageActions.js';\nimport {selectedRowsIdsArraySelector} from 'selectors.js';\n\nimport Panel from 'components/Panel';\nimport Table from 'components/Table';\nimport TableHeader from 'components/TableHeader';\nimport TableRow from 'components/TableRow';\nimport Button from 'components/Button';\nimport Pagination from 'components/Pagination';\nimport Typography from 'components/Typography';\nimport Dialog from 'components/Dialog';\nimport Input from 'components/Input';\nimport Select from 'components/Select';\n\nimport {deleteForeverOneItem, deleteOneItem, editItem, restoreItem, sortUsers, submitForm, switchPage} from './logic';\nimport {defineQueryProps} from 'url.js';\n\nconst styles = () => ({\n    root: {\n        margin: 12,\n        gridArea: 'tags-table',\n        '& table': {\n            marginBottom: 56\n        }\n    },\n    pagePaginationButtons: {\n        position: 'absolute',\n        bottom: 12,\n        left: 12\n    },\n    pagePaginationInfo: {\n        position: 'absolute',\n        bottom: 12,\n        right: 12\n    }\n});\n\nclass TagsListTable extends React.PureComponent {\n\n    state = {\n        ...{...defineQueryProps(), limit: 10, page: 1},\n\n        /**\n         * Data on tags who will be in the table\n         * Данные по тэгам, которые будут в таблице\n         * @type {Array}\n         */\n        data: [\n            // EXAMPLE OF ONE LINE OBJECT\n            // ПРИМЕР ОБЪЕКТА ОДНОЙ СТРОКИ\n            // {\n            //     id: 1,\n            //     name: 'name',\n            //     surname: 'surname',\n            //     email: 'name.surname@email.com',\n            //     role: 'manager',\n            //     created_at: '2018-10-05 13:47:28',\n            //     comments_count: 2332,\n            //     reposted_news_count: 37326\n            // }\n        ],\n        total: 20,\n        prepareDeleteRowID: 0,\n        prepareDeleteForeverRowID: 0,\n        currentEditRowIndex: -1,\n        currentEditRowCreatedAt: null\n    };\n\n    componentDidMount = () => {\n        document.getElementById('tags-data-fetch-submit').click();\n    };\n\n    render = () => {\n        const {classes} = this.props;\n        const {data = [], sort = '', direction = '', page = 0, limit = 20, total = 0, prepareDeleteRowID = 0, currentEditRowIndex, currentEditRowCreatedAt, prepareDeleteForeverRowID = 0} = this.state;\n        const persons = this.props.persons  && this.props.persons.map((i) => [i.name, i.id]);\n\n        return <Panel className={classes.root}>\n            <Table>\n                <TableHeader columns={[\n                    //<input type=\"checkbox\" onChange={selectAllRows(this)}/>,\n                    <React.Fragment>\n                        <Typography\n                            variant=\"simple\"\n                            text=\"Персона\"/>\n                        <Button\n                            variant=\"icon\"\n                            text={<span\n                                className={sort === 'person' && direction === 'asc' ?\n                                    'fa fa-sort-up' :\n                                    'fa fa-sort-down'}>\n\t\t\t\t\t\t\t</span>}\n                            onClick={sortUsers(this)('person')}\n                            className={sort === 'person' ?\n                                'active' :\n                                ''}/>\n                    </React.Fragment>,\n                    <React.Fragment>\n                        <Typography\n                            variant=\"simple\"\n                            text=\"Имя\"/>\n                        <Button\n                            variant=\"icon\"\n                            text={<span\n                                className={sort === 'value' && direction === 'asc' ?\n                                    'fa fa-sort-up' :\n                                    'fa fa-sort-down'}>\n\t\t\t\t\t\t\t</span>}\n                            onClick={sortUsers(this)('value')}\n                            className={sort === 'value' ?\n                                'active' :\n                                ''}/>\n                    </React.Fragment>,\n\n                    <Typography\n                        variant=\"simple\"\n                        text=\"Действия\"/>\n                ]}/>\n\n                <tbody>\n                {data.map((row, i) => (\n                    <TableRow\n                        key={i}\n                        columns={[\n                            row.person && row.person.name,\n                            row.value,\n                            <React.Fragment>\n                                <Button\n                                    variant=\"icon\"\n                                    text={<i className=\"fa fa-edit\"></i>}\n                                    onClick={() => this.setState({\n                                        currentEditRowIndex: i\n                                    })}/>\n\n                                {row.deleted_at && <Button\n                                    variant=\"icon\"\n                                    text={<i className=\"fa fa-refresh\"></i>}\n                                    onClick={() => restoreItem(this, row.id).then(() => {\n                                        document.getElementById('tags-data-fetch-submit').click()\n                                    })}/>\n                                }\n                                {!row.deleted_at ?\n                                    <Button\n                                        variant=\"icon\"\n                                        text={<i className=\"fa fa-close\"></i>}\n                                        onClick={() => this.setState({\n                                            prepareDeleteRowID: row.id\n                                        })}/> :\n                                    <Button\n                                        variant=\"icon\"\n                                        text={<i className=\"fa fa-trash\"></i>}\n                                        onClick={() => this.setState({\n                                            prepareDeleteForeverRowID: row.id\n                                        })}/>}\n\n                            </React.Fragment>\n                        ]}/>\n                ))}\n                </tbody>\n            </Table>\n\n            {<div className={classes.pagePaginationButtons}>\n                <Pagination\n                    limit={limit}\n                    total={total}\n                    page={page}\n                    onClick={switchPage(this)}/>\n            </div>}\n\n            <Typography\n                text={`Записи: ${((page - 1) * limit) + 1} - ${page * limit > total ? total : page * limit} из ${total}`}\n                className={classes.pagePaginationInfo}/>\n\n            <form\n                id=\"tags-data-fetch-form\"\n                onSubmit={submitForm(this)}>\n                <button\n                    type=\"submit\"\n                    style={{display: 'none'}}\n                    id=\"tags-data-fetch-submit\">\n                </button>\n            </form>\n\n            <input type=\"hidden\"\n                   name=\"sort_column\"\n                   form=\"tags-data-fetch-form\"\n                   value={sort}/>\n            <input type=\"hidden\"\n                   name=\"sort_direction\"\n                   form=\"tags-data-fetch-form\"\n                   value={direction}/>\n            <input type=\"hidden\"\n                   name=\"page\"\n                   form=\"tags-data-fetch-form\"\n                   value={page}/>\n            <input type=\"hidden\"\n                   name=\"limit\"\n                   form=\"tags-data-fetch-form\"\n                   value={limit}/>\n\n            {prepareDeleteRowID ?\n                <Dialog\n                    title=\"Удаление тэга\"\n                    onClose={() => this.setState({\n                        prepareDeleteRowID: 0\n                    })}\n                    control={\n                        <React.Fragment>\n                            <Button\n                                variant=\"tab\"\n                                text=\"OK\"\n                                onClick={() => {\n                                    deleteOneItem(this, prepareDeleteRowID)\n                                        .then(() => {document.getElementById('tags-data-fetch-submit').click()})\n                                }}/>\n                            <Button\n                                variant=\"tab\"\n                                text=\"Отмена\"\n                                onClick={() => this.setState({\n                                    prepareDeleteRowID: 0\n                                })}/>\n                        </React.Fragment>\n                    }>\n\n                    <Typography\n                        text={`Вы уверены, что хотите удалить тэг с id ${prepareDeleteRowID}?`}/>\n                </Dialog> : ''}\n\n            {prepareDeleteForeverRowID ?\n                <Dialog\n                    title=\"Удаление тэга\"\n                    onClose={() => this.setState({\n                        prepareDeleteForeverRowID: 0\n                    })}\n                    control={\n                        <React.Fragment>\n                            <Button\n                                variant=\"tab\"\n                                text=\"OK\"\n                                onClick={() => {\n                                    deleteForeverOneItem(this, prepareDeleteForeverRowID)\n                                        .then(() => {document.getElementById('tags-data-fetch-submit').click()})\n                                }}/>\n                            <Button\n                                variant=\"tab\"\n                                text=\"Отмена\"\n                                onClick={() => this.setState({\n                                    prepareDeleteForeverRowID: 0\n                                })}/>\n                        </React.Fragment>\n                    }>\n\n                    <Typography\n                        text={`Вы уверены, что хотите удалить тэг с id ${prepareDeleteForeverRowID}?\n\t\t\t\t\t\t\tЭто действие нельзя отменить!`}/>\n                </Dialog> : ''}\n\n            {currentEditRowIndex > -1 ?\n                <Dialog\n                    title=\"Редактировать\"\n                    onClose={() => this.setState({\n                        currentEditRowIndex: -1\n                    })}\n                    control={\n                        <React.Fragment>\n                            <Button\n                                variant=\"tab\"\n                                text=\"OK\"\n                                onClick={(e) => {\n                                    editItem(this, 'tags-edit-form', data[currentEditRowIndex].id)\n                                        .then(() => document.getElementById('tags-data-fetch-submit').click());\n                                }}/>\n                            <Button\n                                variant=\"tab\"\n                                text=\"Отмена\"\n                                onClick={() => this.setState({\n                                    currentEditRowIndex: -1\n                                })}/>\n                        </React.Fragment>\n                    }>\n                    <form\n                        id=\"tags-edit-form\">\n\n                        <Typography\n                            variant=\"label\"\n                            text=\"Персона\"/>\n\n                        <Select\n                            defaultValue={data[currentEditRowIndex].person_id}\n                            name=\"person_id\"\n                            options={persons}\n                        />\n\n                        <Typography\n                            variant=\"label\"\n                            text=\"Название тэга\"/>\n                        <Input\n                            defaultValue={data[currentEditRowIndex].value}\n                            type=\"text\"\n                            name=\"value\"\n                        />\n                    </form>\n\n                </Dialog> : ''}\n        </Panel>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    selectedRowsIdsArray: selectedRowsIdsArraySelector(state)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    tagsListPageErrorMessage: bindActionCreators(tagsListPageErrorMessage, dispatch),\n    tagsListPageSelectedRowsIDsArray: bindActionCreators(tagsListPageSelectedRowsIDsArray, dispatch),\n    tagsListPageLoading: bindActionCreators(tagsListPageLoading, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(TagsListTable));","import React from 'react';\nimport withStyles from 'react-jss';\n\nimport Typography from \"../../components/Typography/Typography\";\nimport Input from \"../../components/Input/Input\";\nimport Select from \"../../components/Select/Select\";\n\nconst styles = () => ({});\n\nclass TagsEditForm extends React.PureComponent {\n\n    render() {\n        let { persons } = this.props;\n\n        persons = persons  && persons.map((i) => [i.name, i.id]);\n        console.log(persons);\n\n        return <form id=\"tags-add-form\">\n\n            <Typography\n                variant=\"label\"\n                text=\"Персона\"/>\n\n            <Select\n                name=\"person_id\"\n                options={persons}\n            />\n\n            <Typography\n                variant=\"label\"\n                text=\"Название тэга\"/>\n            <Input\n                type=\"text\"\n                name=\"value\"\n            />\n\n        </form>\n    }\n}\n\nexport default withStyles(styles)(TagsEditForm);","import React from 'react';\nimport withStyles from 'react-jss';\n\nimport {\n    catchedErrorMessageSelector,\n    createdAtFilterValueSelector,\n    dataLoadingFlagSelector,\n    selectedRowsIdsArraySelector\n} from 'selectors.js';\n\nimport Header from 'components/Header';\nimport Button from 'components/Button';\nimport Typography from 'components/Typography';\nimport Dialog from 'components/Dialog';\nimport Alert from 'components/Alert';\nimport PageLoadingProcess from 'components/PageLoadingProcess';\nimport moment from \"moment\";\nimport TagsListTable from \"./TagsListTable\";\nimport TagsEditForm from \"./TagsEditForm\";\n\nimport {addItem, fetchPersons,} from './logic';\n//\n// import moment from 'moment';\n// import editItem from \"./logic/editItem\";\n// import fetchData from \"./logic/fetchData\";\n\nconst styles = ({Global, Palette}) => ({\n    '@global': {\n        ...Global,\n        '#root': {\n            ...Global['#root'],\n            display: 'grid',\n            gridTemplateAreas: `\n\t\t\t\t'header header'\n\t\t\t\t'page-title control-elements'\n\t\t\t\t'tags-table tags-filters'\n\t\t\t`,\n            gridTemplateRows: '30px 50px auto',\n            gridTemplateColumns: 'auto 352px'\n        }\n    },\n    control: {\n        lineHeight: '48px',\n        gridArea: 'control-elements',\n        '& button, & a': {\n            margin: '0 18px 0 0'\n        },\n        '& .fa': {\n            margin: '0 6px 0 0'\n        }\n    },\n    title: {\n        gridArea: 'page-title'\n    }\n});\n\n/**\n * Users list page\n * Страница пользователей\n * @extends React.PureComponent\n */\nclass TagsListContainer extends React.PureComponent {\n\n    state = {\n        displayCopySeveralRows: false,\n        displayDeleteSeveralRows: false,\n        displayAlert: false,\n        currentAddRowCreatedAt: moment(),\n        addNewItemFlag: false,\n        persons: [],\n    };\n    componentDidMount() {\n        fetchPersons(this);\n    }\n\n\n    render = () => {\n        const {displayAlert, displayDeleteSeveralRows, displayCopySeveralRows, addNewItemFlag, persons} = this.state;\n        const {classes, selectedRowsIdsArray, catchedErrorMessage, createdAtFilterValue, userListPageCreatedAt, dataLoadingFlag} = this.props;\n\n        return <React.Fragment>\n            {dataLoadingFlag && <PageLoadingProcess/>}\n\n            <Header/>\n\n            <Typography\n                text=\"Тэги\"\n                variant=\"title\"/>\n\n            <div className={classes.control}>\n                <Button\n                    variant=\"link\"\n                    color=\"secondary\"\n                    text={\n                        <React.Fragment>\n                            <i className=\"fa fa-plus\"></i>\n                            Добавить тэг\n                        </React.Fragment>\n                    }\n                    onClick={() => {\n                        this.setState({\n                            addNewItemFlag: true\n                        })\n                    }}/>\n\n            </div>\n\n            <TagsListTable\n                persons={persons}\n            />\n\n\n            {addNewItemFlag === true ?\n                <Dialog\n                    title=\"Добавить тэг\"\n                    onClose={() => this.setState({\n                        addNewItemFlag: false\n                    })}\n                    control={\n                        <React.Fragment>\n                            <Button\n                                variant=\"tab\"\n                                text=\"OK\"\n                                onClick={() => {\n                                    addItem(this, 'tags-add-form')\n                                        .then(() => {\n                                            document.getElementById('tags-data-fetch-submit').click();\n                                        });\n                                }}/>\n                            <Button\n                                variant=\"tab\"\n                                text=\"Cancel\"\n                                onClick={() => this.setState({\n                                    addNewItemFlag: false\n                                })}/>\n                        </React.Fragment>\n                    }>\n\n                    <TagsEditForm\n                        persons={persons}\n                    />\n                </Dialog> : ''}\n\n            {displayAlert ?\n                <Alert text={displayAlert}/> : ''}\n        </React.Fragment>\n    }\n}\n//\n// const mapStateToProps = (state) => ({\n//     catchedErrorMessage: catchedErrorMessageSelector(state),\n//     createdAtFilterValue: createdAtFilterValueSelector(state),\n//     selectedRowsIdsArray: selectedRowsIdsArraySelector(state),\n//     dataLoadingFlag: dataLoadingFlagSelector(state)\n// });\n//\n// const mapDispatchToProps = (dispatch) => ({\n//     userListPageCreatedAt: bindActionCreators(userListPageCreatedAt, dispatch),\n//     userListPageLoading: bindActionCreators(userListPageLoading, dispatch),\n//     userListPageErrorMessage: bindActionCreators(userListPageErrorMessage, dispatch)\n// });\n\nexport default withStyles(styles)(TagsListContainer);","import httpfetch from 'httpfetch.js';\n\nexport default (self = {}) => {\n\tconst { tagsListPageLoading, tagsListPageSelectedRowsIDsArray } = self.props;\n\t\n\treturn httpfetch('/person?limit=1000', 'GET')\n\t\t.then(({ data, total = 0 }) => {\n            self.setState({persons: data})\n\t\t})\n\t\t.catch((err) => {\n\n\t\t});\n}","import TagsListContainer from './TagsListContainer.jsx';\n\nexport default TagsListContainer;"],"sourceRoot":""}