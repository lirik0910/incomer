{"version":3,"sources":["routes/RSSListContainer/logic/deleteOneItem.js","routes/RSSListContainer/logic/editItem.js","routes/RSSListContainer/logic/sortUsers.js","routes/RSSListContainer/logic/submitForm.js","routes/RSSListContainer/logic/fetchData.js","routes/RSSListContainer/logic/switchPage.js","routes/RSSListContainer/logic/restoreItem.js","routes/RSSListContainer/RSSListTable.jsx","routes/RSSListContainer/RSSEditForm.jsx","routes/RSSListContainer/RSSListContainer.jsx","routes/RSSListContainer/index.js"],"names":["deleteOneItem","self","id","arguments","length","undefined","_self$props","props","tagsListPageLoading","tagsListPageErrorMessage","httpfetch","then","setState","prepareDeleteRowID","catch","err","message","setTimeout","editItem","data","sortUsers","newSortColumn","_self$state","state","direction","sort","document","getElementById","click","submitForm","e","preventDefault","dataForFetch","page","limit","sort_direction","sort_column","i","target","elements","value","Object","objectSpread","defineProperty","name","setObjectToQueryString","query","tagsListPageSelectedRowsIDsArray","_ref","_ref$total","total","fetchData","switchPage","flag","restoreItem","RSSListTable","defineQueryProps","prepareDeleteForeverRowID","currentEditRowIndex","currentEditRowCreatedAt","componentDidMount","render","classes","_this","_this$state","_this$state$data","_this$state$sort","_this$state$direction","_this$state$page","_this$state$limit","_this$state$total","persons","map","react_default","a","createElement","Panel","className","root","Table","TableHeader","columns","Fragment","Typography","variant","text","Button","onClick","assertThisInitialized","row","TableRow","key","href","link","title","pub_date","is_visible","pagePaginationButtons","Pagination","concat","pagePaginationInfo","onSubmit","type","style","display","form","Dialog","onClose","control","Select","defaultValue","person_id","options","Input","React","PureComponent","connect","selectedRowsIdsArray","selectedRowsIdsArraySelector","dispatch","bindActionCreators","withStyles","margin","gridArea","& table","marginBottom","position","bottom","left","right","RSSEditForm","this","console","log","Typography_Typography","Select_Select","Input_Input","RSSListContainer","displayCopySeveralRows","displayDeleteSeveralRows","displayAlert","currentAddRowCreatedAt","moment","addNewItemFlag","_this$props","catchedErrorMessage","dataLoadingFlag","createdAtFilterValue","userListPageCreatedAt","PageLoadingProcess","Header","RSSListContainer_RSSListTable","RSSListContainer_RSSEditForm","Alert","Global","Palette","@global","#root","gridTemplateAreas","gridTemplateRows","gridTemplateColumns","lineHeight","& button, & a","& .fa"],"mappings":"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","file":"static/js/16.c4eb1aa9.chunk.js","sourcesContent":["import httpfetch from 'httpfetch.js';\n\nexport default (self, id = 0) => {\n\tconst { tagsListPageLoading, tagsListPageErrorMessage } = self.props;\n\n\ttagsListPageLoading(true);\n\treturn httpfetch('/rss/'+ id, 'DELETE')\n\t\t.then(() => {\n\t\t\ttagsListPageLoading(false);\n\t\t\tself.setState({\n                prepareDeleteRowID: 0,\n\t\t\t});\n\t\t})\n\t\t.catch((err) => {\n\t\t\ttagsListPageLoading(false);\n\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\t\n\t\t\tself.setState({\n\t\t\t\tprepareDeleteRowID: 0\n\t\t\t});\n\t\t\tsetTimeout(() => {\n\t\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\t}, 2600);\n\t\t});\n}","import httpfetch from 'httpfetch.js';\n\nexport default (self, id, data) => {\n\n\n    return httpfetch('/rss/' + id, 'PUT', data)\n        .then(() => {\n\n        })\n        .catch((err) => {\n\n        });\n}","\n/**\n * Sort data by column\n * Сортировка данных по определенной колонке\n * @param {String} newSortColumn - Название колонки\n * @param {String} newSortColumn - Column name\n * @return {Function}\n */\nexport default (self) => (newSortColumn = '') => () => {\n\tconst { direction, sort } = self.state;\n\n\tself.setState({\n\t\tsort: newSortColumn,\n\t\tdirection: sort !== newSortColumn ? 'asc' : \n\t\t\tdirection === 'desc' ?\n\t\t\t\t'asc' :\n\t\t\t\t'desc'\n\t}, () => {\n\t\tdocument.getElementById('rss-data-fetch-submit').click();\n\t});\n}","import {setObjectToQueryString} from 'url.js';\nimport fetchData from './fetchData.js';\n\nexport default (self) => (e) => {\n\te.preventDefault();\n\t\n\tlet dataForFetch = {\n\t\tpage: 1,\n\t\tlimit: 20,\n\t\tsort_direction: 'desc',\n\t\tsort_column: 'created_at'\n\t};\n\n\tfor (let i in e.target.elements) {\n\t\te.target.elements[i].value && (dataForFetch = { \n\t\t\t...dataForFetch, \n\t\t\t[e.target.elements[i].name]: e.target.elements[i].value \n\t\t});\n\t}\n\n\t// save props in url string\n\t// сохранить параметры в строке url запроса\n\tsetObjectToQueryString('RSS', 'rss', dataForFetch);\n\n\t// send request to server\n\t// отправить запрос на сервер\n\tfetchData(dataForFetch, '', self);\n}","import httpfetch from 'httpfetch.js';\n\nexport default (dataForFetch = {}, query = '', self = {}) => {\n\tconst { tagsListPageLoading, tagsListPageSelectedRowsIDsArray } = self.props;\n\t\n\ttagsListPageSelectedRowsIDsArray([]);\n\ttagsListPageLoading(true);\n\thttpfetch('/rss', 'GET', dataForFetch, query)\n\t\t.then(({ data, total = 0 }) => {\n\t\t\ttagsListPageLoading(false);\n\t\t\tself.setState({\n\t\t\t\ttotal,\n\t\t\t\tdata\n\t\t\t})\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconst { tagsListPageErrorMessage } = self.props;\n\t\t\ttagsListPageErrorMessage(err.message);\n\t\t\tsetTimeout(() => {\n\t\t\t\ttagsListPageErrorMessage('');\n\t\t\t}, 2600);\n\n\t\t\ttagsListPageLoading(false);\n\t\t});\n}","/**\n * Switch current table page for paggination\n * @param {Number} page\n * @param {Boolean} flag\n * @return {Function}\n */\nexport default (self) => (page = 1, flag = true) => (e) => {\n\tif (flag) {\n\t\tself.setState({ page: page < 1 ? 1 : page }, () => {\n\t\t\tdocument.getElementById('rss-data-fetch-submit').click();\n\t\t});\n\t}\n}","import httpfetch from 'httpfetch.js';\n\nexport default (self, id ) => {\n     return httpfetch('/rss/restore/' + id, 'PUT')\n            .then(({ data, total = 0 }) => {\n            })\n            .catch((err) => {\n            });\n}","import React from 'react';\nimport withStyles from 'react-jss';\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    tagsListPageErrorMessage,\n    tagsListPageLoading,\n    tagsListPageSelectedRowsIDsArray\n} from 'actions/tagsListPageActions.js';\nimport {selectedRowsIdsArraySelector} from 'selectors.js';\n\nimport Panel from 'components/Panel';\nimport Table from 'components/Table';\nimport TableHeader from 'components/TableHeader';\nimport TableRow from 'components/TableRow';\nimport Button from 'components/Button';\nimport Pagination from 'components/Pagination';\nimport Typography from 'components/Typography';\nimport Dialog from 'components/Dialog';\nimport Input from 'components/Input';\nimport Select from 'components/Select';\n\nimport {deleteOneItem, editItem, restoreItem, sortUsers, submitForm, switchPage} from './logic';\nimport {defineQueryProps} from 'url.js';\n\nconst styles = () => ({\n    root: {\n        margin: 12,\n        gridArea: 'tags-table',\n        '& table': {\n            marginBottom: 56\n        }\n    },\n    pagePaginationButtons: {\n        position: 'absolute',\n        bottom: 12,\n        left: 12\n    },\n    pagePaginationInfo: {\n        position: 'absolute',\n        bottom: 12,\n        right: 12\n    }\n});\n\nclass RSSListTable extends React.PureComponent {\n\n    state = {\n        ...{...defineQueryProps(), limit: 10, page: 1},\n\n        /**\n         * Data on tags who will be in the table\n         * Данные по новостим, которые будут в таблице\n         * @type {Array}\n         */\n        data: [\n            // EXAMPLE OF ONE LINE OBJECT\n            // ПРИМЕР ОБЪЕКТА ОДНОЙ СТРОКИ\n            // {\n            //     id: 1,\n            //     name: 'name',\n            //     surname: 'surname',\n            //     email: 'name.surname@email.com',\n            //     role: 'manager',\n            //     created_at: '2018-10-05 13:47:28',\n            //     comments_count: 2332,\n            //     reposted_news_count: 37326\n            // }\n        ],\n        total: 20,\n        prepareDeleteRowID: 0,\n        prepareDeleteForeverRowID: 0,\n        currentEditRowIndex: -1,\n        currentEditRowCreatedAt: null\n    };\n\n    componentDidMount = () => {\n        document.getElementById('rss-data-fetch-submit').click();\n    };\n\n    render = () => {\n        const {classes} = this.props;\n        const {data = [], sort = '', direction = '', page = 0, limit = 20, total = 0, prepareDeleteRowID = 0, currentEditRowIndex, currentEditRowCreatedAt, prepareDeleteForeverRowID = 0} = this.state;\n        const persons = this.props.persons && this.props.persons.map((i) => [i.name, i.id]);\n\n        return <Panel className={classes.root}>\n            <Table>\n                <TableHeader columns={[\n                    //<input type=\"checkbox\" onChange={selectAllRows(this)}/>,\n                    <React.Fragment>\n                        <Typography\n                            variant=\"simple\"\n                            text=\"Заголовок\"/>\n                        <Button\n                            variant=\"icon\"\n                            text={<span\n                                className={sort === 'person' && direction === 'asc' ?\n                                    'fa fa-sort-up' :\n                                    'fa fa-sort-down'}>\n\t\t\t\t\t\t\t</span>}\n                            onClick={sortUsers(this)('person')}\n                            className={sort === 'person' ?\n                                'active' :\n                                ''}/>\n                    </React.Fragment>,\n                    <React.Fragment>\n                        <Typography\n                            variant=\"simple\"\n                            text=\"Компания\"/>\n                        <Button\n                            variant=\"icon\"\n                            text={<span\n                                className={sort === 'value' && direction === 'asc' ?\n                                    'fa fa-sort-up' :\n                                    'fa fa-sort-down'}>\n\t\t\t\t\t\t\t</span>}\n                            onClick={sortUsers(this)('value')}\n                            className={sort === 'value' ?\n                                'active' :\n                                ''}/>\n                    </React.Fragment>,\n\n                    <React.Fragment>\n                        <Typography\n                            variant=\"simple\"\n                            text=\"Дата публикации\"/>\n                        <Button\n                            variant=\"icon\"\n                            text={<span\n                                className={sort === 'pub_date' && direction === 'asc' ?\n                                    'fa fa-sort-up' :\n                                    'fa fa-sort-down'}>\n\t\t\t\t\t\t\t</span>}\n                            onClick={sortUsers(this)('pub_date')}\n                            className={sort === 'pub_date' ?\n                                'active' :\n                                ''}/>\n                    </React.Fragment>,\n\n                    <Typography\n                        variant=\"simple\"\n                        text=\"Действия\"/>\n                ]}/>\n\n                <tbody>\n                {data.map((row, i) => (\n                    <TableRow\n                        key={i}\n                        columns={[\n                            <a href={row.link} target=\"_blank\">{row.title}</a>,\n                            row.persons && row.persons[0] && row.persons[0].name,\n                            row.pub_date,\n                            <React.Fragment>\n\n\n                                {!row.is_visible && <Button\n                                    variant=\"icon\"\n                                    text={<i className=\"fa fa-eye-slash\"></i>}\n                                    onClick={() => restoreItem(this, row.id).then(() => {\n                                        document.getElementById('rss-data-fetch-submit').click()\n                                    })}/>\n                                }\n                                {row.is_visible && <Button\n                                    variant=\"icon\"\n                                    text={<i className=\"fa fa-eye\"></i>}\n                                    onClick={() => {\n                                        deleteOneItem(this, row.id)\n                                            .then(() => {\n                                                document.getElementById('rss-data-fetch-submit').click()\n                                            })\n                                    }\n                                    }/>}\n\n                            </React.Fragment>\n                        ]}/>\n                ))}\n                </tbody>\n            </Table>\n\n            {<div className={classes.pagePaginationButtons}>\n                <Pagination\n                    limit={limit}\n                    total={total}\n                    page={page}\n                    onClick={switchPage(this)}/>\n            </div>}\n\n            <Typography\n                text={`Записи: ${((page - 1) * limit) + 1} - ${page * limit > total ? total : page * limit} из ${total}`}\n                className={classes.pagePaginationInfo}/>\n\n            <form\n                id=\"tags-data-fetch-form\"\n                onSubmit={submitForm(this)}>\n                <button\n                    type=\"submit\"\n                    style={{display: 'none'}}\n                    id=\"rss-data-fetch-submit\">\n                </button>\n            </form>\n\n            <input type=\"hidden\"\n                   name=\"sort_column\"\n                   form=\"tags-data-fetch-form\"\n                   value={sort}/>\n            <input type=\"hidden\"\n                   name=\"sort_direction\"\n                   form=\"tags-data-fetch-form\"\n                   value={direction}/>\n            <input type=\"hidden\"\n                   name=\"page\"\n                   form=\"tags-data-fetch-form\"\n                   value={page}/>\n            <input type=\"hidden\"\n                   name=\"limit\"\n                   form=\"tags-data-fetch-form\"\n                   value={limit}/>\n\n            {currentEditRowIndex > -1 ?\n                <Dialog\n                    title=\"Редактировать\"\n                    onClose={() => this.setState({\n                        currentEditRowIndex: -1\n                    })}\n                    control={\n                        <React.Fragment>\n                            <Button\n                                variant=\"tab\"\n                                text=\"OK\"\n                                onClick={(e) => {\n                                    editItem(this, 'tags-edit-form', data[currentEditRowIndex].id)\n                                        .then(() => document.getElementById('rss-data-fetch-submit').click());\n                                }}/>\n                            <Button\n                                variant=\"tab\"\n                                text=\"Отмена\"\n                                onClick={() => this.setState({\n                                    currentEditRowIndex: -1\n                                })}/>\n                        </React.Fragment>\n                    }>\n                    <form\n                        id=\"tags-edit-form\">\n\n                        <Typography\n                            variant=\"label\"\n                            text=\"Персона\"/>\n\n                        <Select\n                            defaultValue={data[currentEditRowIndex].person_id}\n                            name=\"person_id\"\n                            options={persons}\n                        />\n\n                        <Typography\n                            variant=\"label\"\n                            text=\"Название тэга\"/>\n                        <Input\n                            defaultValue={data[currentEditRowIndex].value}\n                            type=\"text\"\n                            name=\"value\"\n                        />\n                    </form>\n\n                </Dialog> : ''}\n        </Panel>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    selectedRowsIdsArray: selectedRowsIdsArraySelector(state)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    tagsListPageErrorMessage: bindActionCreators(tagsListPageErrorMessage, dispatch),\n    tagsListPageSelectedRowsIDsArray: bindActionCreators(tagsListPageSelectedRowsIDsArray, dispatch),\n    tagsListPageLoading: bindActionCreators(tagsListPageLoading, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(RSSListTable));","import React from 'react';\nimport withStyles from 'react-jss';\n\nimport Typography from \"../../components/Typography/Typography\";\nimport Input from \"../../components/Input/Input\";\nimport Select from \"../../components/Select/Select\";\n\nconst styles = () => ({});\n\nclass RSSEditForm extends React.PureComponent {\n\n    render() {\n        let { persons } = this.props;\n\n        persons = persons  && persons.map((i) => [i.name, i.id]);\n        console.log(persons);\n\n        return <form id=\"tags-add-form\">\n\n            <Typography\n                variant=\"label\"\n                text=\"Персона\"/>\n\n            <Select\n                name=\"person_id\"\n                options={persons}\n            />\n\n            <Typography\n                variant=\"label\"\n                text=\"Название тэга\"/>\n            <Input\n                type=\"text\"\n                name=\"value\"\n            />\n\n        </form>\n    }\n}\n\nexport default withStyles(styles)(RSSEditForm);","import React from 'react';\nimport withStyles from 'react-jss';\n\nimport {\n    catchedErrorMessageSelector,\n    createdAtFilterValueSelector,\n    dataLoadingFlagSelector,\n    selectedRowsIdsArraySelector\n} from 'selectors.js';\n\nimport Header from 'components/Header';\nimport Button from 'components/Button';\nimport Typography from 'components/Typography';\nimport Dialog from 'components/Dialog';\nimport Alert from 'components/Alert';\nimport PageLoadingProcess from 'components/PageLoadingProcess';\nimport moment from \"moment\";\nimport RSSListTable from \"./RSSListTable\";\nimport RSSEditForm from \"./RSSEditForm\";\n\nimport {addItem, fetchPersons,} from './logic';\n\n\nconst styles = ({Global, Palette}) => ({\n    '@global': {\n        ...Global,\n        '#root': {\n            ...Global['#root'],\n            display: 'grid',\n            gridTemplateAreas: `\n\t\t\t\t'header header'\n\t\t\t\t'page-title control-elements'\n\t\t\t\t'tags-table tags-filters'\n\t\t\t`,\n            gridTemplateRows: '30px 50px auto',\n            gridTemplateColumns: 'auto 352px'\n        }\n    },\n    control: {\n        lineHeight: '48px',\n        gridArea: 'control-elements',\n        '& button, & a': {\n            margin: '0 18px 0 0'\n        },\n        '& .fa': {\n            margin: '0 6px 0 0'\n        }\n    },\n    title: {\n        gridArea: 'page-title'\n    }\n});\n\n/**\n * Users list page\n * Страница пользователей\n * @extends React.PureComponent\n */\nclass RSSListContainer extends React.PureComponent {\n\n    state = {\n        displayCopySeveralRows: false,\n        displayDeleteSeveralRows: false,\n        displayAlert: false,\n        currentAddRowCreatedAt: moment(),\n        addNewItemFlag: false,\n        persons: [],\n    };\n    componentDidMount() {\n    }\n\n\n    render = () => {\n        const {displayAlert, displayDeleteSeveralRows, displayCopySeveralRows, addNewItemFlag, persons} = this.state;\n        const {classes, selectedRowsIdsArray, catchedErrorMessage, createdAtFilterValue, userListPageCreatedAt, dataLoadingFlag} = this.props;\n\n        return <React.Fragment>\n            {dataLoadingFlag && <PageLoadingProcess/>}\n\n            <Header/>\n\n            <Typography\n                text=\"RSS новости\"\n                variant=\"title\"/>\n\n\n            <RSSListTable\n            />\n\n            {addNewItemFlag === true ?\n                <Dialog\n                    title=\"Добавить пользователя\"\n                    onClose={() => this.setState({\n                        addNewItemFlag: false\n                    })}\n                    control={\n                        <React.Fragment>\n\n                            <Button\n                                variant=\"tab\"\n                                text=\"Cancel\"\n                                onClick={() => this.setState({\n                                    addNewItemFlag: false\n                                })}/>\n                        </React.Fragment>\n                    }>\n\n                    <RSSEditForm\n                        persons={persons}\n                    />\n                </Dialog> : ''}\n\n            {displayAlert ?\n                <Alert text={catchedErrorMessage}/> : ''}\n        </React.Fragment>\n    }\n}\n\n\nexport default withStyles(styles)(RSSListContainer);","import RSSListContainer from './RSSListContainer.jsx';\n\nexport default RSSListContainer;"],"sourceRoot":""}